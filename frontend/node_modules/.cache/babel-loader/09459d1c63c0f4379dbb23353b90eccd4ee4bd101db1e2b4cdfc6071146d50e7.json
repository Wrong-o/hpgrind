{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayb\\\\Desktop\\\\blogg\\\\react\\\\frontend\\\\src\\\\pages\\\\Gangertabell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true\n});\nconst Game = () => {\n  _s();\n  const navigate = useNavigate();\n  const [questionData, setQuestionData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState(\"\");\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // State för valt svar\n  const [correctAnswer, setCorrectAnswer] = useState(null); // State för korrekt svar\n\n  const fetchQuestion = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/get-question');\n      setQuestionData(response.data);\n      setLoading(false);\n      setMessage(\"\");\n      setSelectedAnswer(null); // Återställ valt svar\n      setCorrectAnswer(null); // Återställ korrekt svar\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n      setLoading(false);\n    }\n  };\n  const submitAnswer = async isCorrect => {\n    try {\n      if (!questionData || !questionData.variables || questionData.variables.length < 2) {\n        console.error(\"Question data is incomplete\");\n        return;\n      }\n      const [x, y] = questionData.variables;\n      const response = await api.post('/submit-answer', {\n        x: x,\n        y: y,\n        is_correct: isCorrect\n      });\n      console.log(response.data.message);\n    } catch (error) {\n      console.error(\"Error submitting answer:\", error);\n      if (error.response) {\n        console.error(\"Response data:\", error.response.data);\n        console.error(\"Response status:\", error.response.status);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchQuestion();\n  }, []);\n  const handleAnswerClick = async selected => {\n    setSelectedAnswer(selected); // Spara det valda svaret\n    const isCorrect = selected === questionData.correct_answer;\n    if (isCorrect) {\n      setCorrectAnswer(selected); // Spara korrekt svar\n      setMessage(\"Correct! Fetching a new question...\");\n    } else {\n      setCorrectAnswer(questionData.correct_answer); // Visa korrekt svar\n      setMessage(\"Incorrect! Try again...\");\n    }\n\n    // Submit the answer to the backend\n    await submitAnswer(isCorrect);\n\n    // Fetch a new question after a short delay\n    setTimeout(() => {\n      fetchQuestion();\n    }, 1500);\n  };\n  const handleGameClick = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : questionData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: questionData.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: questionData.answers.map((answer, index) => {\n          // Bestäm stilen för knappen\n          let buttonStyle = {\n            cursor: 'pointer',\n            padding: '10px',\n            border: '1px solid black',\n            margin: '5px',\n            display: 'inline-block',\n            backgroundColor: 'gray'\n          };\n\n          // Om användaren har valt ett svar\n          if (selectedAnswer) {\n            if (answer === correctAnswer) {\n              buttonStyle.backgroundColor = 'green'; // Grön för korrekt svar\n            } else if (answer === selectedAnswer) {\n              buttonStyle.backgroundColor = 'red'; // Röd för fel svar\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleAnswerClick(answer),\n            style: buttonStyle,\n            children: answer\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGameClick,\n      style: {\n        marginTop: '20px',\n        padding: '10px',\n        backgroundColor: 'gray',\n        color: 'white',\n        border: 'none'\n      },\n      children: \"Go to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"+ritiWoYDLe7ZKzdGIVaCqBPArU=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","api","create","baseURL","process","env","REACT_APP_API_URL","withCredentials","Game","_s","navigate","questionData","setQuestionData","loading","setLoading","message","setMessage","selectedAnswer","setSelectedAnswer","correctAnswer","setCorrectAnswer","fetchQuestion","response","get","data","error","console","submitAnswer","isCorrect","variables","length","x","y","post","is_correct","log","status","handleAnswerClick","selected","correct_answer","setTimeout","handleGameClick","children","fileName","_jsxFileName","lineNumber","columnNumber","question","answers","map","answer","index","buttonStyle","cursor","padding","border","margin","display","backgroundColor","onClick","style","marginTop","color","_c","$RefreshReg$"],"sources":["C:/Users/jayb/Desktop/blogg/react/frontend/src/pages/Gangertabell.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\nconst Game = () => {\r\n  const navigate = useNavigate();\r\n  const [questionData, setQuestionData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // State för valt svar\r\n  const [correctAnswer, setCorrectAnswer] = useState(null); // State för korrekt svar\r\n\r\n  const fetchQuestion = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/get-question');\r\n      setQuestionData(response.data);\r\n      setLoading(false);\r\n      setMessage(\"\");\r\n      setSelectedAnswer(null); // Återställ valt svar\r\n      setCorrectAnswer(null); // Återställ korrekt svar\r\n    } catch (error) {\r\n      console.error(\"Error fetching question:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const submitAnswer = async (isCorrect) => {\r\n    try {\r\n      if (!questionData || !questionData.variables || questionData.variables.length < 2) {\r\n        console.error(\"Question data is incomplete\");\r\n        return;\r\n      }\r\n      const [x, y] = questionData.variables;\r\n      const response = await api.post('/submit-answer', {\r\n        x: x,\r\n        y: y,\r\n        is_correct: isCorrect\r\n      });\r\n      console.log(response.data.message);\r\n    } catch (error) {\r\n      console.error(\"Error submitting answer:\", error);\r\n      if (error.response) {\r\n        console.error(\"Response data:\", error.response.data);\r\n        console.error(\"Response status:\", error.response.status);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchQuestion();\r\n  }, []);\r\n\r\n  const handleAnswerClick = async (selected) => {\r\n    setSelectedAnswer(selected); // Spara det valda svaret\r\n    const isCorrect = selected === questionData.correct_answer;\r\n    if (isCorrect) {\r\n      setCorrectAnswer(selected); // Spara korrekt svar\r\n      setMessage(\"Correct! Fetching a new question...\");\r\n    } else {\r\n      setCorrectAnswer(questionData.correct_answer); // Visa korrekt svar\r\n      setMessage(\"Incorrect! Try again...\");\r\n    }\r\n\r\n    // Submit the answer to the backend\r\n    await submitAnswer(isCorrect);\r\n\r\n    // Fetch a new question after a short delay\r\n    setTimeout(() => {\r\n      fetchQuestion();\r\n    }, 1500);\r\n  };\r\n\r\n  const handleGameClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Game Page</h1>\r\n      {loading ? (\r\n        <p>Loading question...</p>\r\n      ) : (\r\n        questionData && (\r\n          <>\r\n            <p>{questionData.question}</p>\r\n            <ul>\r\n              {questionData.answers.map((answer, index) => {\r\n                // Bestäm stilen för knappen\r\n                let buttonStyle = {\r\n                  cursor: 'pointer',\r\n                  padding: '10px',\r\n                  border: '1px solid black',\r\n                  margin: '5px',\r\n                  display: 'inline-block',\r\n                  backgroundColor: 'gray',\r\n                };\r\n\r\n                // Om användaren har valt ett svar\r\n                if (selectedAnswer) {\r\n                  if (answer === correctAnswer) {\r\n                    buttonStyle.backgroundColor = 'green'; // Grön för korrekt svar\r\n                  } else if (answer === selectedAnswer) {\r\n                    buttonStyle.backgroundColor = 'red'; // Röd för fel svar\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <li\r\n                    key={index}\r\n                    onClick={() => handleAnswerClick(answer)}\r\n                    style={buttonStyle}\r\n                  >\r\n                    {answer}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            <p>{message}</p>\r\n          </>\r\n        )\r\n      )}\r\n      <button onClick={handleGameClick} style={{ marginTop: '20px', padding: '10px', backgroundColor: 'gray', color: 'white', border: 'none' }}>Go to Home</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1D,MAAM4B,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACFP,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMQ,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,eAAe,CAAC;MAC/CX,eAAe,CAACU,QAAQ,CAACE,IAAI,CAAC;MAC9BV,UAAU,CAAC,KAAK,CAAC;MACjBE,UAAU,CAAC,EAAE,CAAC;MACdE,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;MACzBE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDX,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMa,YAAY,GAAG,MAAOC,SAAS,IAAK;IACxC,IAAI;MACF,IAAI,CAACjB,YAAY,IAAI,CAACA,YAAY,CAACkB,SAAS,IAAIlB,YAAY,CAACkB,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;QACjFJ,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAC;QAC5C;MACF;MACA,MAAM,CAACM,CAAC,EAAEC,CAAC,CAAC,GAAGrB,YAAY,CAACkB,SAAS;MACrC,MAAMP,QAAQ,GAAG,MAAMrB,GAAG,CAACgC,IAAI,CAAC,gBAAgB,EAAE;QAChDF,CAAC,EAAEA,CAAC;QACJC,CAAC,EAAEA,CAAC;QACJE,UAAU,EAAEN;MACd,CAAC,CAAC;MACFF,OAAO,CAACS,GAAG,CAACb,QAAQ,CAACE,IAAI,CAACT,OAAO,CAAC;IACpC,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClBI,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;QACpDE,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACH,QAAQ,CAACc,MAAM,CAAC;MAC1D;IACF;EACF,CAAC;EAED1C,SAAS,CAAC,MAAM;IACd2B,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;IAC5CpB,iBAAiB,CAACoB,QAAQ,CAAC,CAAC,CAAC;IAC7B,MAAMV,SAAS,GAAGU,QAAQ,KAAK3B,YAAY,CAAC4B,cAAc;IAC1D,IAAIX,SAAS,EAAE;MACbR,gBAAgB,CAACkB,QAAQ,CAAC,CAAC,CAAC;MAC5BtB,UAAU,CAAC,qCAAqC,CAAC;IACnD,CAAC,MAAM;MACLI,gBAAgB,CAACT,YAAY,CAAC4B,cAAc,CAAC,CAAC,CAAC;MAC/CvB,UAAU,CAAC,yBAAyB,CAAC;IACvC;;IAEA;IACA,MAAMW,YAAY,CAACC,SAAS,CAAC;;IAE7B;IACAY,UAAU,CAAC,MAAM;MACfnB,aAAa,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMoB,eAAe,GAAGA,CAAA,KAAM;IAC5B/B,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,oBACEZ,OAAA;IAAA4C,QAAA,gBACE5C,OAAA;MAAA4C,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjBjC,OAAO,gBACNf,OAAA;MAAA4C,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAE1BnC,YAAY,iBACVb,OAAA,CAAAE,SAAA;MAAA0C,QAAA,gBACE5C,OAAA;QAAA4C,QAAA,EAAI/B,YAAY,CAACoC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BhD,OAAA;QAAA4C,QAAA,EACG/B,YAAY,CAACqC,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;UAC3C;UACA,IAAIC,WAAW,GAAG;YAChBC,MAAM,EAAE,SAAS;YACjBC,OAAO,EAAE,MAAM;YACfC,MAAM,EAAE,iBAAiB;YACzBC,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE,cAAc;YACvBC,eAAe,EAAE;UACnB,CAAC;;UAED;UACA,IAAIzC,cAAc,EAAE;YAClB,IAAIiC,MAAM,KAAK/B,aAAa,EAAE;cAC5BiC,WAAW,CAACM,eAAe,GAAG,OAAO,CAAC,CAAC;YACzC,CAAC,MAAM,IAAIR,MAAM,KAAKjC,cAAc,EAAE;cACpCmC,WAAW,CAACM,eAAe,GAAG,KAAK,CAAC,CAAC;YACvC;UACF;UAEA,oBACE5D,OAAA;YAEE6D,OAAO,EAAEA,CAAA,KAAMtB,iBAAiB,CAACa,MAAM,CAAE;YACzCU,KAAK,EAAER,WAAY;YAAAV,QAAA,EAElBQ;UAAM,GAJFC,KAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKR,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLhD,OAAA;QAAA4C,QAAA,EAAI3B;MAAO;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,eAChB,CAEL,eACDhD,OAAA;MAAQ6D,OAAO,EAAElB,eAAgB;MAACmB,KAAK,EAAE;QAAEC,SAAS,EAAE,MAAM;QAAEP,OAAO,EAAE,MAAM;QAAEI,eAAe,EAAE,MAAM;QAAEI,KAAK,EAAE,OAAO;QAAEP,MAAM,EAAE;MAAO,CAAE;MAAAb,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1J,CAAC;AAEV,CAAC;AAACrC,EAAA,CAzHID,IAAI;EAAA,QACSb,WAAW;AAAA;AAAAoE,EAAA,GADxBvD,IAAI;AA2HV,eAAeA,IAAI;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}