{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayb\\\\Desktop\\\\blogg\\\\react\\\\frontend\\\\src\\\\pages\\\\Game.js\",\n  _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Import axios\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const navigate = useNavigate();\n  const [questionData, setQuestionData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [message, setMessage] = useState(\"\"); // Message to display feedback\n\n  // Function to fetch the question from the FastAPI backend\n  const fetchQuestion = async () => {\n    try {\n      setLoading(true); // Set loading to true when fetching new question\n      const response = await axios.get('http://localhost:8000/get-question'); // Adjust the URL to your FastAPI server\n      setQuestionData(response.data);\n      setLoading(false); // Set loading to false once the data is fetched\n      setMessage(\"\"); // Clear any previous message\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n      setLoading(false);\n      setMessage(\"Failed to load question. Please try again.\"); // Display error message\n    }\n  };\n\n  // Fetch the question when the component mounts\n  useEffect(() => {\n    fetchQuestion();\n  }, []);\n\n  // Handle answer click\n  const handleAnswerClick = selectedAnswer => {\n    const isCorrect = selectedAnswer === questionData.correct_answer;\n\n    // Send the answer and the question to the backend for logging (optional)\n    axios.post('http://localhost:8000/log-answer', {\n      question: questionData.question,\n      correct: isCorrect\n    }).catch(error => console.error(\"Error logging answer:\", error)); // Handle logging errors\n\n    // Update the message based on the answer\n    setMessage(isCorrect ? \"Correct! Fetching a new question...\" : \"Incorrect! Try again...\");\n\n    // Fetch a new question after a short delay\n    setTimeout(() => {\n      fetchQuestion();\n    }, 1500); // 1.5 seconds delay before fetching new question\n  };\n\n  // Handle going back to the home page\n  const handleGameClick = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Game Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : questionData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: questionData.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: questionData.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleAnswerClick(answer) // Make the answer clickable\n          ,\n          style: {\n            cursor: 'pointer',\n            padding: '5px',\n            border: '1px solid black',\n            margin: '5px',\n            display: 'inline-block'\n          },\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this), \" \"]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGameClick,\n      children: \"Go to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"yTr8YhnecE1VIwj0robihWssIdE=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useNavigate","React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","navigate","questionData","setQuestionData","loading","setLoading","message","setMessage","fetchQuestion","response","get","data","error","console","handleAnswerClick","selectedAnswer","isCorrect","correct_answer","post","question","correct","catch","setTimeout","handleGameClick","children","fileName","_jsxFileName","lineNumber","columnNumber","answers","map","answer","index","onClick","style","cursor","padding","border","margin","display","_c","$RefreshReg$"],"sources":["C:/Users/jayb/Desktop/blogg/react/frontend/src/pages/Game.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'; // Import axios\r\n\r\nconst Game = () => {\r\n    const navigate = useNavigate();\r\n    const [questionData, setQuestionData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [message, setMessage] = useState(\"\"); // Message to display feedback\r\n\r\n    // Function to fetch the question from the FastAPI backend\r\n    const fetchQuestion = async () => {\r\n        try {\r\n            setLoading(true); // Set loading to true when fetching new question\r\n            const response = await axios.get('http://localhost:8000/get-question'); // Adjust the URL to your FastAPI server\r\n            setQuestionData(response.data);\r\n            setLoading(false); // Set loading to false once the data is fetched\r\n            setMessage(\"\"); // Clear any previous message\r\n        } catch (error) {\r\n            console.error(\"Error fetching question:\", error);\r\n            setLoading(false);\r\n            setMessage(\"Failed to load question. Please try again.\"); // Display error message\r\n        }\r\n    };\r\n\r\n    // Fetch the question when the component mounts\r\n    useEffect(() => {\r\n        fetchQuestion();\r\n    }, []);\r\n\r\n    // Handle answer click\r\n    const handleAnswerClick = (selectedAnswer) => {\r\n        const isCorrect = selectedAnswer === questionData.correct_answer;\r\n        \r\n        // Send the answer and the question to the backend for logging (optional)\r\n        axios.post('http://localhost:8000/log-answer', {\r\n            question: questionData.question,\r\n            correct: isCorrect,\r\n        })\r\n        .catch(error => console.error(\"Error logging answer:\", error)); // Handle logging errors\r\n\r\n        // Update the message based on the answer\r\n        setMessage(isCorrect ? \"Correct! Fetching a new question...\" : \"Incorrect! Try again...\");\r\n\r\n        // Fetch a new question after a short delay\r\n        setTimeout(() => {\r\n            fetchQuestion();\r\n        }, 1500); // 1.5 seconds delay before fetching new question\r\n    };\r\n\r\n    // Handle going back to the home page\r\n    const handleGameClick = () => {\r\n        navigate('/');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Game Page</h1>\r\n            {loading ? (\r\n                <p>Loading question...</p>\r\n            ) : (\r\n                questionData && (\r\n                    <>\r\n                        <p>{questionData.question}</p>\r\n                        <ul>\r\n                            {questionData.answers.map((answer, index) => (\r\n                                <li \r\n                                    key={index}\r\n                                    onClick={() => handleAnswerClick(answer)} // Make the answer clickable\r\n                                    style={{ cursor: 'pointer', padding: '5px', border: '1px solid black', margin: '5px', display: 'inline-block' }}\r\n                                >\r\n                                    {answer}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                        <p>{message}</p> {/* Feedback message */}\r\n                    </>\r\n                )\r\n            )}\r\n            <button onClick={handleGameClick}>Go to Home</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}