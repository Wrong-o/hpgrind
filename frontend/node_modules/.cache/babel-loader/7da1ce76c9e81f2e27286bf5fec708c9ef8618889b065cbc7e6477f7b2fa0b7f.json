{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayb\\\\Desktop\\\\blogg\\\\react\\\\beginner-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizApp = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [isFinished, setIsFinished] = useState(false);\n  const [missedQuestions, setMissedQuestions] = useState([]);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const response = await fetch('/question.json');\n      const data = await response.json();\n      // Shuffle questions\n      const shuffledQuestions = data.sort(() => Math.random() - 0.5);\n      setQuestions(shuffledQuestions);\n    };\n    fetchQuestions();\n  }, []);\n  const handleAnswer = selectedOption => {\n    setUserAnswers(prev => [...prev, selectedOption]);\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setIsFinished(true);\n      checkMissedQuestions();\n    }\n  };\n  const checkMissedQuestions = () => {\n    const missed = questions.filter((question, index) => userAnswers[index] !== question.correct_answer);\n    setMissedQuestions(missed);\n  };\n  const correctAnswersCount = () => {\n    return userAnswers.filter((answer, index) => answer === questions[index].correct_answer).length;\n  };\n  const restartQuiz = () => {\n    setUserAnswers([]);\n    setCurrentQuestionIndex(0);\n    setIsFinished(false);\n    // Shuffle missed questions\n    const shuffledMissedQuestions = missedQuestions.sort(() => Math.random() - 0.5);\n    setQuestions(shuffledMissedQuestions);\n  };\n  if (isFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz Finished!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Correct Answers: \", correctAnswersCount(), \" out of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Your Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Correct Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Result\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: questions.map((question, index) => {\n            const userAnswer = userAnswers[index];\n            const isCorrect = userAnswer === question.correct_answer;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: question.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: userAnswer || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: question.correct_answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: isCorrect ? 'Correct' : 'Incorrect'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartQuiz,\n        children: \"Try Failed Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: currentQuestion.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswer(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizApp, \"BB9lVHSpggr0h6eoQXrWS6JyUWM=\");\n_c = QuizApp;\nexport default QuizApp;\nvar _c;\n$RefreshReg$(_c, \"QuizApp\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","QuizApp","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","isFinished","setIsFinished","missedQuestions","setMissedQuestions","fetchQuestions","response","fetch","data","json","shuffledQuestions","sort","Math","random","handleAnswer","selectedOption","prev","length","checkMissedQuestions","missed","filter","question","index","correct_answer","correctAnswersCount","answer","restartQuiz","shuffledMissedQuestions","children","fileName","_jsxFileName","lineNumber","columnNumber","map","userAnswer","isCorrect","text","onClick","currentQuestion","options","option","_c","$RefreshReg$"],"sources":["C:/Users/jayb/Desktop/blogg/react/beginner-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst QuizApp = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [isFinished, setIsFinished] = useState(false);\n  const [missedQuestions, setMissedQuestions] = useState([]);\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const response = await fetch('/question.json');\n      const data = await response.json();\n      // Shuffle questions\n      const shuffledQuestions = data.sort(() => Math.random() - 0.5);\n      setQuestions(shuffledQuestions);\n    };\n    fetchQuestions();\n  }, []);\n\n  const handleAnswer = (selectedOption) => {\n    setUserAnswers((prev) => [...prev, selectedOption]);\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setIsFinished(true);\n      checkMissedQuestions();\n    }\n  };\n\n  const checkMissedQuestions = () => {\n    const missed = questions.filter((question, index) => userAnswers[index] !== question.correct_answer);\n    setMissedQuestions(missed);\n  };\n\n  const correctAnswersCount = () => {\n    return userAnswers.filter((answer, index) => answer === questions[index].correct_answer).length;\n  };\n\n  const restartQuiz = () => {\n    setUserAnswers([]);\n    setCurrentQuestionIndex(0);\n    setIsFinished(false);\n    // Shuffle missed questions\n    const shuffledMissedQuestions = missedQuestions.sort(() => Math.random() - 0.5);\n    setQuestions(shuffledMissedQuestions);\n  };\n\n  if (isFinished) {\n    return (\n      <div>\n        <h1>Quiz Finished!</h1>\n        <p>Correct Answers: {correctAnswersCount()} out of {questions.length}</p>\n        <h2>Results</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Question</th>\n              <th>Your Answer</th>\n              <th>Correct Answer</th>\n              <th>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {questions.map((question, index) => {\n              const userAnswer = userAnswers[index];\n              const isCorrect = userAnswer === question.correct_answer;\n              return (\n                <tr key={index}>\n                  <td>{question.text}</td>\n                  <td>{userAnswer || 'N/A'}</td>\n                  <td>{question.correct_answer}</td>\n                  <td>{isCorrect ? 'Correct' : 'Incorrect'}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <button onClick={restartQuiz}>Try Failed Questions</button>\n      </div>\n    );\n  }\n\n  if (questions.length === 0) {\n    return <div>Loading questions...</div>;\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n\n  return (\n    <div>\n      <h2>{currentQuestion.text}</h2>\n      <div>\n        {currentQuestion.options.map((option, index) => (\n          <button key={index} onClick={() => handleAnswer(option)}>\n            {option}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default QuizApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}