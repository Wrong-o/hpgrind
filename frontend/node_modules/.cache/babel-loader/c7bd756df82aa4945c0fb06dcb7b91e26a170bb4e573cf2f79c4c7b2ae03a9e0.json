{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import axios from'axios';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const api=axios.create({baseURL:process.env.REACT_APP_API_URL,withCredentials:true});const Game=()=>{const navigate=useNavigate();const[questionData,setQuestionData]=useState(null);const[loading,setLoading]=useState(true);const[message,setMessage]=useState(\"\");const[selectedAnswer,setSelectedAnswer]=useState(null);// State för valt svar\nconst[correctAnswer,setCorrectAnswer]=useState(null);// State för korrekt svar\nconst fetchQuestion=async()=>{try{setLoading(true);const response=await api.get('/get-question');setQuestionData(response.data);setLoading(false);setMessage(\"\");setSelectedAnswer(null);// Återställ valt svar\nsetCorrectAnswer(null);// Återställ korrekt svar\n}catch(error){console.error(\"Error fetching question:\",error);setLoading(false);}};const submitAnswer=async isCorrect=>{try{if(!questionData||!questionData.variables||questionData.variables.length<2){console.error(\"Question data is incomplete\");return;}const[x,y]=questionData.variables;const response=await api.post('/submit-answer',{x:x,y:y,is_correct:isCorrect});console.log(response.data.message);}catch(error){console.error(\"Error submitting answer:\",error);if(error.response){console.error(\"Response data:\",error.response.data);console.error(\"Response status:\",error.response.status);}}};useEffect(()=>{fetchQuestion();},[]);const handleAnswerClick=async selected=>{setSelectedAnswer(selected);// Spara det valda svaret\nconst isCorrect=selected===questionData.correct_answer;if(isCorrect){setCorrectAnswer(selected);// Spara korrekt svar\nsetMessage(\"Correct! Fetching a new question...\");}else{setCorrectAnswer(questionData.correct_answer);// Visa korrekt svar\nsetMessage(\"Incorrect! Try again...\");}// Submit the answer to the backend\nawait submitAnswer(isCorrect);// Fetch a new question after a short delay\nsetTimeout(()=>{fetchQuestion();},1500);};const handleGameClick=()=>{navigate('/');};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Game Page\"}),loading?/*#__PURE__*/_jsx(\"p\",{children:\"Loading question...\"}):questionData&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:questionData.question}),/*#__PURE__*/_jsx(\"ul\",{children:questionData.answers.map((answer,index)=>{// Bestäm stilen för knappen\nlet buttonStyle={cursor:'pointer',padding:'10px',border:'1px solid black',margin:'5px',display:'inline-block',backgroundColor:'gray'};// Om användaren har valt ett svar\nif(selectedAnswer){if(answer===correctAnswer){buttonStyle.backgroundColor='green';// Grön för korrekt svar\n}else if(answer===selectedAnswer){buttonStyle.backgroundColor='red';// Röd för fel svar\n}}return/*#__PURE__*/_jsx(\"li\",{onClick:()=>handleAnswerClick(answer),style:buttonStyle,children:answer},index);})}),/*#__PURE__*/_jsx(\"p\",{children:message})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleGameClick,style:{marginTop:'20px',padding:'10px',backgroundColor:'gray',color:'white',border:'none'},children:\"Go to Home\"})]});};export default Game;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","api","create","baseURL","process","env","REACT_APP_API_URL","withCredentials","Game","navigate","questionData","setQuestionData","loading","setLoading","message","setMessage","selectedAnswer","setSelectedAnswer","correctAnswer","setCorrectAnswer","fetchQuestion","response","get","data","error","console","submitAnswer","isCorrect","variables","length","x","y","post","is_correct","log","status","handleAnswerClick","selected","correct_answer","setTimeout","handleGameClick","children","question","answers","map","answer","index","buttonStyle","cursor","padding","border","margin","display","backgroundColor","onClick","style","marginTop","color"],"sources":["C:/Users/jayb/Desktop/blogg/react/frontend/src/pages/Gangertabell.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  withCredentials: true,\r\n});\r\n\r\nconst Game = () => {\r\n  const navigate = useNavigate();\r\n  const [questionData, setQuestionData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // State för valt svar\r\n  const [correctAnswer, setCorrectAnswer] = useState(null); // State för korrekt svar\r\n\r\n  const fetchQuestion = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/get-question');\r\n      setQuestionData(response.data);\r\n      setLoading(false);\r\n      setMessage(\"\");\r\n      setSelectedAnswer(null); // Återställ valt svar\r\n      setCorrectAnswer(null); // Återställ korrekt svar\r\n    } catch (error) {\r\n      console.error(\"Error fetching question:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const submitAnswer = async (isCorrect) => {\r\n    try {\r\n      if (!questionData || !questionData.variables || questionData.variables.length < 2) {\r\n        console.error(\"Question data is incomplete\");\r\n        return;\r\n      }\r\n      const [x, y] = questionData.variables;\r\n      const response = await api.post('/submit-answer', {\r\n        x: x,\r\n        y: y,\r\n        is_correct: isCorrect\r\n      });\r\n      console.log(response.data.message);\r\n    } catch (error) {\r\n      console.error(\"Error submitting answer:\", error);\r\n      if (error.response) {\r\n        console.error(\"Response data:\", error.response.data);\r\n        console.error(\"Response status:\", error.response.status);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchQuestion();\r\n  }, []);\r\n\r\n  const handleAnswerClick = async (selected) => {\r\n    setSelectedAnswer(selected); // Spara det valda svaret\r\n    const isCorrect = selected === questionData.correct_answer;\r\n    if (isCorrect) {\r\n      setCorrectAnswer(selected); // Spara korrekt svar\r\n      setMessage(\"Correct! Fetching a new question...\");\r\n    } else {\r\n      setCorrectAnswer(questionData.correct_answer); // Visa korrekt svar\r\n      setMessage(\"Incorrect! Try again...\");\r\n    }\r\n\r\n    // Submit the answer to the backend\r\n    await submitAnswer(isCorrect);\r\n\r\n    // Fetch a new question after a short delay\r\n    setTimeout(() => {\r\n      fetchQuestion();\r\n    }, 1500);\r\n  };\r\n\r\n  const handleGameClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Game Page</h1>\r\n      {loading ? (\r\n        <p>Loading question...</p>\r\n      ) : (\r\n        questionData && (\r\n          <>\r\n            <p>{questionData.question}</p>\r\n            <ul>\r\n              {questionData.answers.map((answer, index) => {\r\n                // Bestäm stilen för knappen\r\n                let buttonStyle = {\r\n                  cursor: 'pointer',\r\n                  padding: '10px',\r\n                  border: '1px solid black',\r\n                  margin: '5px',\r\n                  display: 'inline-block',\r\n                  backgroundColor: 'gray',\r\n                };\r\n\r\n                // Om användaren har valt ett svar\r\n                if (selectedAnswer) {\r\n                  if (answer === correctAnswer) {\r\n                    buttonStyle.backgroundColor = 'green'; // Grön för korrekt svar\r\n                  } else if (answer === selectedAnswer) {\r\n                    buttonStyle.backgroundColor = 'red'; // Röd för fel svar\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <li\r\n                    key={index}\r\n                    onClick={() => handleAnswerClick(answer)}\r\n                    style={buttonStyle}\r\n                  >\r\n                    {answer}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            <p>{message}</p>\r\n          </>\r\n        )\r\n      )}\r\n      <button onClick={handleGameClick} style={{ marginTop: '20px', padding: '10px', backgroundColor: 'gray', color: 'white', border: 'none' }}>Go to Home</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}