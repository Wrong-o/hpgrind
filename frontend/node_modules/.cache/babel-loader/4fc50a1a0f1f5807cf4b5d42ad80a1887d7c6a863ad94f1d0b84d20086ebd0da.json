{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayb\\\\Desktop\\\\blogg\\\\react\\\\frontend\\\\src\\\\pages\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [questionData, setQuestionData] = useState(null);\n  const [refresh, setRefresh] = useState(0);\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const timestamp = new Date().getTime(); // Current timestamp\n      try {\n        const response = await fetch(`http://localhost:8000/get-question?ts=${timestamp}`, {\n          method: 'GET',\n          cache: 'no-store' // Prevent caching\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setQuestionData(data); // Update the state with new data\n      } catch (error) {\n        console.error('Error fetching question:', error);\n      }\n    };\n    fetchQuestion();\n  }, [refresh]);\n  const handleRefresh = () => {\n    setRefresh(prev => prev + 1);\n  };\n  if (!questionData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: questionData.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: questionData.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRefresh,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"1OxTFGImgOos7frTkGVX2aVJK/U=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Game","_s","questionData","setQuestionData","refresh","setRefresh","fetchQuestion","timestamp","Date","getTime","response","fetch","method","cache","ok","Error","data","json","error","console","handleRefresh","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","question","answers","map","answer","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jayb/Desktop/blogg/react/frontend/src/pages/Test.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Game = () => {\r\n  const [questionData, setQuestionData] = useState(null);\r\n  const [refresh, setRefresh] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const timestamp = new Date().getTime(); // Current timestamp\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/get-question?ts=${timestamp}`, {\r\n          method: 'GET',\r\n          cache: 'no-store', // Prevent caching\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        setQuestionData(data); // Update the state with new data\r\n      } catch (error) {\r\n        console.error('Error fetching question:', error);\r\n      }\r\n    };\r\n\r\n    fetchQuestion();\r\n  }, [refresh]);\r\n\r\n  const handleRefresh = () => {\r\n    setRefresh(prev => prev + 1);\r\n  };\r\n\r\n  if (!questionData) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{questionData.question}</h2>\r\n      <ul>\r\n        {questionData.answers.map((answer, index) => (\r\n          <li key={index}>{answer}</li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={handleRefresh}>Refresh</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACd,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MACxC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCJ,SAAS,EAAE,EAAE;UACjFK,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE,UAAU,CAAE;QACrB,CAAC,CAAC;QACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCd,eAAe,CAACa,IAAI,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDZ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACF,OAAO,CAAC,CAAC;EAEb,MAAMgB,aAAa,GAAGA,CAAA,KAAM;IAC1Bf,UAAU,CAACgB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;EAC9B,CAAC;EAED,IAAI,CAACnB,YAAY,EAAE,oBAAOH,OAAA;IAAAuB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE/C,oBACE3B,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAKpB,YAAY,CAACyB;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChC3B,OAAA;MAAAuB,QAAA,EACGpB,YAAY,CAAC0B,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACtChC,OAAA;QAAAuB,QAAA,EAAiBQ;MAAM,GAAdC,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACL3B,OAAA;MAAQiC,OAAO,EAAEZ,aAAc;MAAAE,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACzB,EAAA,CA1CID,IAAI;AAAAiC,EAAA,GAAJjC,IAAI;AA4CV,eAAeA,IAAI;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}